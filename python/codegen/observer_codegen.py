import sys
import os
import subprocess
from codegen import *
from utilities import add_arguments, ArgSpec


info_prog = sys.argv[1]
observers = subprocess.check_output([info_prog, "observer"]).strip()
observers = observers.split("\n")

target_path = os.path.join("branchedflowsim", "observers")
if not os.path.exists(target_path):
    os.makedirs(target_path)

disclaimer = '''"""
This file was automatically generated by `observer_codegen.py`. Do not edit manually!
"""
'''

for observer in observers:
    target_file = open(os.path.join(target_path, observer+".py"), "w")  # type: file
    data = subprocess.check_output([info_prog, "observer", "args", observer])
    description = subprocess.check_output([info_prog, "observer", "doc", observer]).strip()
    monodromy = subprocess.check_output([info_prog, "observer", "monodromy", observer]).strip()
    result = eval(data)  # type: list[ArgSpec]

    obs_class = Class(observer.title(), "Observer")
    obs_class.add_code("_ARGUMENTS_ = %s" % data)
    obs_class.add_code("_NAME_ = '%s'" % observer)
    obs_class.add_code("_MONODROMY_ = %s" % monodromy.title())

    init = Function("__init__")
    obs_class.add_method(init)
    obs_class.docstring = description

    init.add_argument("self")
    add_arguments(result, obs_class, init)

    target_file.write(disclaimer)
    target_file.write("from ..cmdline_helpers import ArgSpec\n")
    target_file.write("from .observer import Observer\n\n\n")
    target_file.write(str(obs_class))
    target_file.close()


__init__file = open(os.path.join(target_path, "__init__.py"), "w")



for observer in observers:
    __init__file.write("from .{} import {}\n".format(observer, observer.title()))
